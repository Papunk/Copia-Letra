#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

	org	0x1C00
; LCD numbers   0     1     2     3     4     5     6     7     8     9     0crss 1cntr 4clsd 7diag
byteH   db      0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0xE0, 0xFF, 0xE7, 0xFC, 0x00, 0x61, 0x83
byteL   db      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x50, 0x20, 0x28
; Letter bank	P	   F	      J	         G
randH	db	11001111b, 10001111b, 01111000b, 10111101b
; ISR Vectors
	org	0xFFDA                  ; vector for PORT1
	dc16	PORT_1_ISR		; set vector for 'PORT_1_ISR' routine

        ORG     0FFE8h                  ; vector for TIMER_A0
        DC16    TIMER_A0_ISR            ; set vector for 'TIMER_A0_ISR' routine

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack


; This section displays the title until the game is started
main:
	call	#setupApp
	call	#displayTitle
        call    #setupTimer
	call	#enableLPM
mainloop:
	; If state is 1 (game), go to game
	cmp	#1,R15
	jeq	game
	; Else keep displaying the title
	jmp	mainloop


; This section displays the state of the game until it finishes
game:
	call	#clearDisplay
        call    #showRandomLetter
	call	#setupGame
gameLoop:
	call	#updateCronometer
	; If state is 2 (game ended), go to the end loop
	cmp	#2,R15
	jeq	results
	; Else stay in the game loop
	jmp	gameLoop


; This section displays the result until the game is restarted
results:
	call	#showResults
	call	#enableLPM
resultsLoop:
	; If state is 1 (game), play again
	cmp	#1,R15
	jeq	game
	; Else stay in the end loop
	jmp	resultsLoop




; =======================================================================================
; Mainloop Subroutines
; =======================================================================================


; _______________________________________________________________________________________
; Purpose: Subroutine to show the app name in display
; Preconditions: LCD is enabled and activated
; Postconditions: Display characters will show the application title (CPLETR)
; Arguments: None
; Author, date of creation: Pedro Pagán
displayTitle:
	; C
	mov.b	#10011100b,&0xA29
	mov.b	#00000000b,&0xA2A
	; P
	mov.b	#11001111b,&0xA25
	mov.b	#00000000b,&0xA26
	; L
	mov.b	#00011100b,&0xA23
	mov.b	#00000000b,&0xA24
	; E
	mov.b	#10011110b,&0xA32
	mov.b	#00000000b,&0xA33
	; T
	mov.b	#10000000b,&0xA2E
	mov.b	#01010000b,&0xA2F
	; R
	mov.b	#11001111b,&0xA27
	mov.b	#00000010b,&0xA28
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
setupApp:
; Stop watchdog timer
        mov.w   #WDTPW+WDTHOLD,&WDTCTL
; Setup state
	mov.w	#0,R15
; Setup buttons
	; Set PxSel0 and PxSel1 as digital I/O
	bic.b   #0xFF,&P1SEL0
        bic.b   #0xFF,&P1SEL1
        bic.b   #0xFF,&P9SEL0
        bic.b   #0xFF,&P9SEL1
	; Set P1.1 and P1.2 for input and the rest to output
	mov.b   #11111001B,&P1DIR
	; Set all P9 pins for output
	bis.b   #0xFF,&P9DIR
	; Activate P1.1 and P1.2 pullup resistors
        bis.b   #00000110b,&P1REN
	bis.b   #00000110b,&P1OUT
	; Enable P1.1 and P1.2 interrupts
	bis.b	#00000110b,&P1IE
	; Set interrupt on high to low transitions
	bis.b	#00000110b,&P1IES
; Setup LCD
	; Enable segments
	mov.w	#0xFFFF,&LCDCPCTL0
	mov.w	#0xFC3F,&LCDCPCTL1
	mov.w	#0xFFFF,&LCDCPCTL2
	; Unlock GPIO
        bic.w	#LOCKLPM5,&PM5CTL0
	; Initialize LCD
        mov.w	#0x041e,&LCDCCTL0
	; Enable charge pump
        mov.w	#0x0208,&LCDCVCTL
	; Clock sync
        mov.w	#0x8000,&LCDCCPCTL
	; Clear LCD memory
        mov.w	#2,&LCDCMEMCTL
	; Turn LCD on
        bis.w	#1,&LCDCCTL0
; Turn off LEDS
	bic.b	#00000001b,&P1OUT
	bic.b	#10000000b,&P9OUT
; Prevent previous button presses
	bic.b	#00000110b,&P1IFG
; Enable interrupts
	nop
	bis.w	#GIE,SR
	nop
        ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
setupTimer:
        mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt

        mov     #TASSEL_2+MC_1+ID_3, &TA0CTL  ;Set timer according to next table
	nop
        ; Uses SMCLK and up mode
        ; TASSELx        MCx (mode control)                IDx (input divider)
        ; 00 -> TACLK    00 -> Stop                        00 -> /1
        ; 01 -> ACLK     01 -> Up mode (up to TACCR0)      01 -> /2
        ; 10 -> SMCLK    10 -> Continuous (up to 0FFFFh)   02 -> /4
        ; 11 -> INCLK    11 -> Up/down (top on TACCR0)     03 -> /8

        ; period = cycles * divider / SMLCK
        ; Assuming SMLCK = 1 MHz, divider = 8 and period = 0.5 seg
        ; cycles = 62500.  With period = 0.5 LED turn on every 1 second
        mov     #31250, &TA0CCR0        ; Set the timer capture compare register 0

        bic.b   #0000010b, &P1IFG       ; To erase a flag raised before
               	                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.
        nop				; required befor enabling interrupts

        ;bis     #GIE+LPM0, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        bis     #GIE, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        nop                             ; Required after enabling interrupts
        ;nop                             ; Required after enabling interrupts
	ret




; =======================================================================================
; Gameloop Subroutines
; =======================================================================================


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
setupGame:
	; Counter
        mov 	#0,R5
	; Minute
	mov 	#0,R6
	; Second (tenths)
        mov 	#0,R7
	; Second (hundreadths)
        mov 	#0,R8
	; Segment selector
        mov.b 	#0x80,R9
	; Turn off LEDs
	bic.b	#BIT7,P9OUT
        bic.b 	#BIT0,P1OUT
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
showRandomLetter:
        CMP #4,R5
        JLO lessThan4
	; Only keep the first three bits (0,1,2)
        AND #3, R5
lessThan4:
	; Display the chosen letter
	mov.b	randH(R5),&0xA29
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
updateCronometer:
        CMP 	#4,R5
        JNZ 	lessThan10
        mov 	#0,R5
        INC 	R6
        CMP 	#10,R6
        JNZ 	lessThan10
        mov 	#0, R6
        INC 	R7
        CMP 	#6,R7
        JNZ	lessThan10
        mov	#0,R7
        INC	R8
lessThan10:
	; Minute
        mov.b 	byteH(R8),&0xA32
        mov.b 	byteL(R8),&0xA33
	; Separator
        bis.b 	#100b,&0xA33
	; Second (tenths)
        mov.b 	byteH(R7),&0xA2E
        mov.b 	byteL(R7),&0xA2F
	; Second (hundreadths)
        mov.b 	byteH(R6),&0xA27
        mov.b 	byteL(R6),&0xA28
        ret




; =======================================================================================
; Resultsloop Subroutines
; =======================================================================================


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
showResults:
	cmp.b 	&0xA29,&0xA25
	jne	loss
victory:
	; Heart
	mov.b	#00000100b,&0xA22
	; Green LED
	bis.b	#BIT7,P9OUT
	jmp	showedResults
loss:
	; Exclamation mark
	mov.b	#000000001b,&0xA22
	; Red LED
        bis.b 	#BIT0,P1OUT
showedResults:
	ret




; =======================================================================================
; ISRs / Input Handlers
; =======================================================================================


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
TIMER_A0_ISR:
        cmp 	#0,R15
        JEQ 	noFlashing
	xor.b	R9,&0xA25
noFlashing:
        INC 	R5
        reti


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
PORT_1_ISR:
	call	#delay

	bit.b	#00000010b,&P1IFG
	jnz	interruptAtS1
	bit.b	#00000100b,&P1IFG
	jnz	interruptAtS2
	jmp	disableLPM
interruptAtS1:
	bic.b	#00000010b,&P1IFG
	call	#handleS1
	jmp	disableLPM
interruptAtS2:
	bic.b	#00000100b,&P1IFG
	call	#handleS2
	jmp	disableLPM
disableLPM:
	pop	R14
	bic	#LPM0,R14
	push.w	R14
	reti


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
handleS1:
	; If state is 0 (main), do nothing
	cmp	#0,R15
	jeq	endS1
	; If state is 1 (game), skip the currentSegment
        cmp	#1,R15
        jeq 	skipCurrentSegment
	; If state is 2 (results), play again
	cmp	#2,R15
	jeq	playAgain
	; Else, do nothing
	jmp	endS1
skipCurrentSegment:
        bic.b 	R9,&0xA25
	call	#checkSegment
	rra 	R9
	call	#checkIfDone
	jmp	endS1
playAgain:
	call	#startTimer
	mov.w	#1,R15
endS1:
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
handleS2:
	; If state is 0 (main), set the state to 0 (game)
	cmp	#0,R15
	jeq	startGame
	; If state is 1 (game), select the current segment
	cmp	#1,R15
	jeq	selectCurrentSegment
	; Else, do nothing
	jmp	endS2
startGame:
	mov.w	#1,R15
	jmp	endS2
selectCurrentSegment:
        bis.b 	R9,&0xA25
	call	#checkSegment
        rra 	R9
	call	#checkIfDone
endS2:
	ret




; =======================================================================================
; Helper Subroutines
; =======================================================================================


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
clearDisplay:
        mov.w	#2,&LCDCMEMCTL
	ret

stopTimer:
	bic 	#CCIE,&TA0CCTL0
	ret

startTimer:
	mov 	#CCIE,&TA0CCTL0
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
enableLPM:
	nop
	bis	#LPM0,SR
	nop
	ret

; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
delay:
	push.w	R4
        mov.w 	#0xFFFF,R4
decrementDelay:
	dec 	R4
        jnz 	decrementDelay
	pop	R4
        ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
checkSegment:
	push.b	&0xA29
	push.b	&0xA25

	inv.b	R9
	bic.b	R9, &0xA29
	bic.b	R9, &0xA25
	inv.b	R9

	cmp.b	&0xA29, &0xA25
	JEQ	correctSegment
	call	#stopTimer
	mov.w	#2,R15

correctSegment:
	pop.b	&0xA25
	pop.b	&0xA29
	ret


; _______________________________________________________________________________________
; Purpose:
; Preconditions:
; Postconditions:
; Arguments: None
; Author, date of creation:
checkIfDone:
	; If the final segment has been selected, game is done
	cmp	#0,R9
	jeq	gameIsDone
	; If the two letters are equal, game is done
	cmp 	&0xA29,&0xA25
	jeq	gameIsDone
	; Else, check if the current segment determines the game outcome
	;call	#checkSegment
	jmp	checked
gameIsDone:
	call	#stopTimer
	mov.w	#2,R15
checked:
        ret




	END
