#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

	org	0x1C00
; LCD numbers   0     1     2     3     4     5     6     7     8     9     0crss 1cntr 4clsd 7diag
byteH   db      0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0xE0, 0xFF, 0xE7, 0xFC, 0x00, 0x61, 0x83
byteL   db      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x50, 0x20, 0x28
; Rndm letters	P	   F	      J	         G
randH	db	11001111b, 10001111b, 11111000b, 10111101b
randL	db	00000000b, 00000000b, 00000000b, 00000000b
; ISRs
	org	0xFFDA
	dc16	portOneISR


        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack


main:
	call	#setupApp
	call	#displayTitle
mainloop:
	; If state is 1 (game), go to game. Else keep displaying the title.
	cmp	#1,R15
	jz	game
	jmp	mainloop


game:
	call	#setupGame
	call	#clearDisplay	// just for testing
gameLoop:
// game subroutine calls go here
	call	#displayGameState
	; If state is 2 (game ended), go to the end loop. Else keep stay in the game loop.
	cmp	#2,R15
	jz	endLoop
	jmp	gameLoop


endLoop:
// keep displaying the end state + the led depending on game result
	; If state is 1 (game), go to game. Else keep stay in the end loop.
	cmp	#1,R15
	jz	game
	jmp	endLoop



; ---------------------------------------------------------------------------------------
; Gameloop Subroutines
; ---------------------------------------------------------------------------------------

// TODO: set up initial values
setupGame:
	ret

// TODO: display the randomly chosen letter, the current state of the attempt, and the current time
displayGameState:
	ret


; ---------------------------------------------------------------------------------------
; Endloop Subroutines
; ---------------------------------------------------------------------------------------


; ---------------------------------------------------------------------------------------
; Mainloop Subroutines
; ---------------------------------------------------------------------------------------

displayTitle:
	; C
	mov.b	#10011100b,&0xA29
	mov.b	#00000000b,&0xA2A
	; P
	mov.b	#11001111b,&0xA25
	mov.b	#00000000b,&0xA26
	; L
	mov.b	#00011100b,&0xA23
	mov.b	#00000000b,&0xA24
	; E
	mov.b	#10011110b,&0xA32
	mov.b	#00000000b,&0xA33
	; T
	mov.b	#10000000b,&0xA2E
	mov.b	#01010000b,&0xA2F
	; R
	mov.b	#11001111b,&0xA27
	mov.b	#00000010b,&0xA28
	ret

// TODO split into 3 subroutines for cleanliness (General setup, LCD setup, Button setup)
setupApp:
; Stop watchdog timer
        mov.w   #WDTPW+WDTHOLD,&WDTCTL
; Setup state
	mov.w	#0,R15
; Setup buttons
	; Set PxSel0 and PxSel1 as digital I/O
	bic.b   #0xFF,&P1SEL0
        bic.b   #0xFF,&P1SEL1
        bic.b   #0xFF,&P9SEL0
        bic.b   #0xFF,&P9SEL1
	; Set P1.1 and P1.2 for input and the rest to output
	mov.b   #11111001B,&P1DIR
	; Set all P9 pins for output
	bis.b   #0xFF,&P9DIR
	; Activate P1.1 and P1.2 pullup resistors
        bis.b   #00000110b,&P1REN
	bis.b   #00000110b,&P1OUT
	; Enable P1.1 and P1.2 interrupts
	bis.b	#00000110b,&P1IE
	; Set interrupt on high to low transitions
	bis.b	#00000110b,&P1IES
; Setup LCD
	; Enable segments
	mov.w	#0xFFFF,&LCDCPCTL0
	mov.w	#0xFFFF,&LCDCPCTL1
	mov.w	#0xFFFF,&LCDCPCTL2
	; Unlock GPIO
        bic.w	#LOCKLPM5,&PM5CTL0
	; Initialize LCD
        mov.w	#0x041e,&LCDCCTL0
	; Enable charge pump
        mov.w	#0x0208,&LCDCVCTL
	; Clock sync
        mov.w	#0x8000,&LCDCCPCTL
	; Clear LCD memory
        mov.w	#2,&LCDCMEMCTL
	; Turn LCD on
        bis.w	#1,&LCDCCTL0
; Turn off LEDS
	bic.b	#00000001b,&P1OUT
	bic.b	#10000000b,&P9OUT
; Prevent previous button presses
	bic.b	#00000110b,&P1IFG
; Enable interrupts
	nop
	bis.w	#GIE,SR
	nop
	ret

; ---------------------------------------------------------------------------------------
; Input Handlers
; ---------------------------------------------------------------------------------------

portOneISR:
	;call	#delay
	bit.b	#00000010b,&P1IFG
	jnz	interruptAtS1
	bit.b	#00000100b,&P1IFG
	jnz	interruptAtS2
handledISR:
	reti
interruptAtS1:
	bic.b	#00000010b,&P1IFG
	call	#handleS1
	jmp	handledISR
interruptAtS2:
	bic.b	#00000100b,&P1IFG
	call	#handleS2
	jmp	handledISR


// Set to clearDisplay for testing purposes

handleS1:
	ret


handleS2:
	mov.w	#1,R15
endS2:
	ret


; ---------------------------------------------------------------------------------------
; Helper Subroutines
; ---------------------------------------------------------------------------------------

// Just for testing purposes, can probably delete later
clearDisplay:
	mov.b	#00000000b,&0xA29
	mov.b	#00000000b,&0xA2A

	mov.b	#00000000b,&0xA25
	mov.b	#00000000b,&0xA26

	mov.b	#00000000b,&0xA23
	mov.b	#00000000b,&0xA24

	mov.b	#00000000b,&0xA32
	mov.b	#00000000b,&0xA33

	mov.b	#00000000b,&0xA2E
	mov.b	#00000000b,&0xA2F

	mov.b	#00000000b,&0xA27
	mov.b	#00000000b,&0xA28
	ret

delay:
	push.w	R4
        mov.w 	#50000,R4
decrementDelay:
	dec 	R4
        jnz 	decrementDelay
	pop	R4
        ret


pickRandomNumber:
	ret




	END